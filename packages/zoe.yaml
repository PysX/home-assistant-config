###############################################################################
#   @package        :   Renault ZE
#   @description    :   Control de la Zoe
#   @url            :   https://github.com/epenet/hassRenaultZE
###############################################################################

homeassistant:
  customize:
    device_tracker.zoe_location:
      entity_picture: /local/zoe.png

###############################################################################
#                               Input number
# to check : https://github.com/snarky-snark/home-assistant-variables#parameters
###############################################################################
input_number:
  #
  # Max charge % value to optimise time vs power consumed (lot of loss for last %)
  #
  zoe_max_charge:
    name: Maximum charge
    initial: 99
    min: 70
    max: 100
    step: 1
    unit_of_measurement: "%"
  #
  # Set AC Temperature
  #
  zoe_hvac_temperature:
    name: Temperature AC
    initial: 21
    min: 18
    max: 23
    step: 0.5
    unit_of_measurement: "°C"
  zoe_kwh_price:
    name: Prix kWh
    initial: 0.1582
    min: 0.1000
    max: 0.2000
    mode: box
    step: 0.001
    unit_of_measurement: "€ / kWh"

###############################################################################
#                               Input Booleans
###############################################################################
input_boolean:
  #
  # To activate/deactivate charge limitation. will stop charge if
  # input.number zoe_max_charge is atteined
  #
  zoe_limit_charge:
    name: Limitation de charge
    initial: false

###############################################################################
#                               Sensor
###############################################################################
sensor:
  # Calculation kilométrage cible théorique for the Zoé
  # par rapport au contrat de leasing  (22500 km sur 3 ans (36 mois))
  #
  - platform: template
    sensors:
      zoe_mileage_target:
        value_template: >-
          {{ (((as_timestamp(strptime(states('sensor.date'), '%Y-%m-%d')) - as_timestamp('2020-01-16 0:0:00+02:00'))
          / 86400) * 22500 / (365 * 3)) | round}}
        friendly_name: "kilométrage cible"
        unit_of_measurement: "km"
        icon_template: mdi:bullseye-arrow
  #
  # Temps restant en minute -> conversion timestamp
  #
  - platform: template
    sensors:
      zoe_charging_remaining_time_hour:
        friendly_name: "Temps restant"
        value_template: >-
          {% if states('sensor.zoe_charging_remaining_time') == 'unknown' -%}
          unknown
          {%- elif is_state("binary_sensor.zoe_charging", "on") -%}
          {{ states.sensor.zoe_charging_remaining_time.state | int | multiply(60) | timestamp_custom('%R', false)  }}
          {%- else -%}
          {{ "0" | int | multiply(60) | timestamp_custom('%R', false)  }}
          {%- endif %}
        unit_of_measurement: "heures"
        icon_template: mdi:timelapse
  #
  # Consommation estimée en kWh / 100 km
  #
  - platform: template
    sensors:
      zoe_kwh_per_km:
        friendly_name: "Consommation"
        value_template: >-
          {% if states('sensor.zoe_battery_available_energy') == 'unknown' -%}
          unknown
          {%- else -%}
          {{ ((states('sensor.zoe_battery_available_energy') |float) / (states('sensor.zoe_battery_autonomy') | float ) * 100) | round(2) }} 
          {%- endif %}
        unit_of_measurement: "kwh"
        icon_template: mdi:timelapse
